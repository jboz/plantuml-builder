name: Build and Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: 'build-deploy'
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    if: !contains(github.event.head_commit.message, 'ci skip')
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          ssh-key: ${{ secrets.ACTION_BOT_SECRET_KEY }}

      - name: Check production files changes
        run: |
          GITDIFF=$(git diff --name-only HEAD^ HEAD | grep -E -- 'src|pom.xml' | tr -d '[:space:]')
          if [ "$GITDIFF" == "" ]; then
            echo "No code changes, skipped"
            exit 0
          fi
          echo ::set-env name=changes::true
          echo "Application will be build and published"

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: adopt
          cache: maven
          server-id: ossrh
          server-username: OSS_SONATYPE_USERNAME
          server-password: OSS_SONATYPE_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Create maven release version
        if: ${{ env.changes && github.event_name == 'push' }}
        run: mvn -f pom.xml -q build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion} versions:commit

      - name: Deploy
        if: ${{ env.changes }}
        run: mvn --batch-mode --update-snapshots deploy -P release -DskipTests=true
        env:
          OSS_SONATYPE_USERNAME: ${{ secrets.OSS_SONATYPE_USERNAME }}
          OSS_SONATYPE_PASSWORD: ${{ secrets.OSS_SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: |
            target/plantuml-builder-*.jar
            target/plantuml-builder-*.pom
          retention-days: 1

      - name: Create and commit next dev version
        if: ${{ env.changes && github.event_name == 'push' }}
        run: mvn -f pom.xml -q build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}-SNAPSHOT versions:commit

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: New release - ci skip

  tests_java:
    if: github.event_name == 'pull_request' && !contains(github.event.head_commit.message, 'ci skip')
    needs: publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [11, 15, 17]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Check production files changes
        run: |
          GITDIFF=$(git diff --name-only HEAD^ HEAD | grep -E -- 'src|pom.xml' | tr -d '[:space:]')
          if [ "$GITDIFF" == "" ]; then
            echo "No code changes, skipped"
            exit 0
          fi
          echo ::set-env name=changes::true
          echo "Application will be build and published"

      - name: Set up java
        if: ${{ env.changes }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.version }}
          distribution: adopt

      - name: Install plantuml-builder artifact locally
        run: |
          ARTIFACT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          ARTIFACT_PATH=~/.m2/repository/ch/ifocusit/plantuml-builder/$ARTIFACT_VERSION/
          echo ::set-env name=ARTIFACT_PATH::$ARTIFACT_PATH

      - uses: actions/download-artifact@v3
        id: download
        with:
          name: my-artifact
          path: ${{ env.ARTIFACT_PATH }}

      - name: Test ${{ matrix.version }}
        if: ${{ env.changes }}
        working-directory: ./src/it/example-java-x
        run: mvn verify
        env:
          JAVA_VERSION: ${{ matrix.version }}
